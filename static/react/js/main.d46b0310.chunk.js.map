{"version":3,"sources":["component/TimeTable.js","component/mock.js","component/modal.js","component/month.js","component/day.js","App.js","serviceWorker.js","index.js"],"names":["placeholder","Typography","Text","type","style","fontSize","spin","TimeTable","result","loading","history","className","onRow","record","index","onClick","last_name","push","locale","emptyText","dataSource","columns","title","dataIndex","key","width","render","date","running_min","time","newTime","h","m","normTime","allMonth","data","confirm","Modal","config","initialValue","required","validate","trigger","rules","message","Form","create","form","rest","onSubmit","e","persist","validateFields","err","values","a","async","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","content","console","log","addUser","useState","setLoading","useEffect","getData","Item","getFieldDecorator","obj","onOk","icon","cancelText","okText","centered","Days","props","mode","then","match","params","to","id","ghost","exact","path","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.d46b0310.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Icon, Table, Typography } from \"antd\";\r\n\r\nconst { Text } = Typography;\r\nconst placeholder = <Icon type=\"loading\" style={{ fontSize: 44 }} spin />;\r\n\r\nconst normTime = time => {\r\n  let newTime;\r\n  var h = (time / 60) ^ 0;\r\n  if (h) {\r\n    var m = time % 60;\r\n    if (m < 10) m = \"0\" + m;\r\n    newTime = h + \" ч \" + m + \" м\";\r\n  } else {\r\n    newTime = time + \" м\";\r\n  }\r\n  return newTime;\r\n};\r\n\r\nconst TimeTable = ({ result, loading, history }) => {\r\n  const renderColumns = () => {\r\n    return [\r\n      {\r\n        title: \"Дата\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        width: \"30%\",\r\n        render: date => <div>{date && date}</div>\r\n        // sorter: (a, b) => {\r\n        //   return a.title.localeCompare(b.title);\r\n        // }\r\n      },\r\n      {\r\n        title: \"Фамилия\",\r\n        dataIndex: \"last_name\",\r\n        key: \"last_name\",\r\n        width: \"40%\",\r\n        render: last_name => <div>{last_name && last_name}</div>\r\n        // sorter: (a, b) => {\r\n        //   return a.content.localeCompare(b.content);\r\n        // }\r\n      },\r\n      {\r\n        title: \"Время\",\r\n        dataIndex: \"running_min\",\r\n        key: \"running_min\",\r\n        width: \"30%\",\r\n        render: running_min => <div>{running_min && normTime(running_min)}</div>\r\n        // sorter: (a, b) => {\r\n        //   return a.date.localeCompare(b.date);\r\n        // }\r\n      }\r\n    ];\r\n  };\r\n\r\n  const getDetail = last_name => history.push(`/detail/${last_name}`)\r\n\r\n\r\n  return (\r\n    <div className=\"Table-wrapper\">\r\n      <Table\r\n        onRow={(record, index) => ({\r\n          index,\r\n          onClick: () => getDetail(record.last_name)\r\n        })}\r\n        locale={{ emptyText: loading ? placeholder : \"Нету результатов...\" }}\r\n        dataSource={result}\r\n        columns={renderColumns()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeTable;\r\n","export const allMonth = {\r\n  data: [{ date: \"01/2020\", last_name: \"shirnin\", running_min: 163 }]\r\n};\r\n","import React from 'react';\r\nimport { Modal, Icon } from 'antd';\r\nimport './modal.css';\r\n\r\nconst confirm = Modal.confirm;\r\n\r\nexport const ConfirmBlue = (obj) => {\r\n    confirm({\r\n        title: 'Внимание!',\r\n        icon: <Icon type=\"question-circle\" />,\r\n        content: <span>Вы действительно хотите добавить нового пользоавателя?</span>,\r\n        cancelText: 'Отмена',\r\n        okText: 'Добавить',\r\n        centered: true,\r\n        className: 'blueConfirm',\r\n        ...obj\r\n    });\r\n};\r\n\r\nexport const showSuccessModal = (obj, seconds) => {\r\n    // если передано время закрытия используем его (если нет = 5)\r\n    let secondsToClose = (seconds ? seconds : 5);\r\n    // создаем модальное окно\r\n    const successEmployeeAction = Modal.confirm(obj);\r\n    // обновляем кнопку\r\n    setNewButtonCaption(successEmployeeAction, obj.okText, secondsToClose);\r\n    // обновляем состоянии кнопки по счеткику\r\n    const timer = setInterval(() => {\r\n        secondsToClose -= 1;\r\n        setNewButtonCaption(successEmployeeAction, obj.okText, secondsToClose);\r\n    }, 1000);\r\n    // закрываем окно по окончании отсчета\r\n    setTimeout(() => {\r\n        clearInterval(timer);\r\n        successEmployeeAction.destroy();\r\n    }, secondsToClose * 1000);\r\n};\r\n\r\n// дбавляем кол-во оставшихся до закрытия окна секунд к подписи кнопки\r\nconst setNewButtonCaption = (comp, text, seconds) => {\r\n    comp.update({\r\n        okText: text + \" (\" + seconds + \")\",\r\n    });\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TimeTable from \"./TimeTable\";\r\nimport { Form, Input, Button, Icon } from \"antd\";\r\nimport { allMonth } from \"./mock\";\r\nimport { ConfirmBlue, showSuccessModal } from \"./modal\";\r\n\r\nconst config = (initialValue, required) => ({\r\n  initialValue,\r\n  validate: [\r\n    {\r\n      trigger: \"onChange\",\r\n      rules: [\r\n        {\r\n          required: required,\r\n          message: \"обязательное для заполнения\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n});\r\n\r\nconst addUser = async values => {\r\n  const rawResponse = await fetch(\"/user\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(values)\r\n  });\r\n  const content = await rawResponse.json();\r\n  console.log(content)\r\n  console.log(rawResponse)\r\n};\r\n\r\nfunction Month({ form, ...rest }) {\r\n  const onSubmit = e => {\r\n    e.persist();\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        addUser(values);\r\n        // form.resetFields();\r\n        // showSuccessModal({\r\n        //   title: \"Успех!\",\r\n        //   content: `Пользователь ${values[\"last_name\"]}, успешно добавлен!`,\r\n        //   className: \"vehicleSuccess\",\r\n        //   okText: \"Готово\",\r\n        //   icon: \"check\",\r\n        //   closable: true,\r\n        //   maskClosable: true,\r\n        //   centered: true\r\n        // });\r\n      }\r\n    });\r\n  };\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState([]);\r\n  const [errors, setErrors] = useState(null);\r\n\r\n  const getData = async () => {\r\n    setLoading(true);\r\n    const rawResponse = fetch(\"/month\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    const content = await rawResponse.json();\r\n    setLoading(false);\r\n    console.log(content.body);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div>\r\n            <Icon type=\"user\" />\r\n          </div>\r\n          <Form className=\"user-form\">\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"name\",\r\n                config(\"\", true)\r\n              )(<Input placeholder=\"Укажите имя\" className=\"sm\" />)}\r\n            </Form.Item>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"last_name\",\r\n                config(\"\", true)\r\n              )(<Input placeholder=\"Укажите фамилию\" className=\"sm\" />)}\r\n            </Form.Item>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"api_key\",\r\n                config(\"\", true)\r\n              )(<Input placeholder=\"Введите Api-key\" className=\"md\" />)}\r\n            </Form.Item>\r\n            <div className=\"btn\">\r\n              <Button\r\n                onClick={e =>\r\n                  ConfirmBlue({\r\n                    onOk: () => onSubmit(e)\r\n                  })\r\n                }\r\n                type=\"primary\"\r\n              >\r\n                Добавить\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <Icon type=\"idcard\" />\r\n          <TimeTable result={allMonth.data} history={rest.history} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form.create()(Month);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table, Icon, Button } from \"antd\";\r\nimport TimeTable from \"./TimeTable\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst placeholder = <Icon type=\"loading\" style={{ fontSize: 44 }} spin />;\r\n\r\nconst Days = props => {\r\n  const getData = async last_name => {\r\n    setLoading(true);\r\n    let content;\r\n    fetch(`/days/${last_name}`, {\r\n      method: \"GET\",\r\n      mode: \"no-cors\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    }).then(data => console.log(data));\r\n\r\n    setLoading(false);\r\n    console.log(content);\r\n  };\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState([]);\r\n  const [errors, setErrors] = useState(null);\r\n  useEffect(() => {\r\n    const { last_name } = props.match.params;\r\n    getData(last_name);\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <Link to=\"/\">\r\n          <Button type=\"link\" id=\"index-btn\" ghost={true}>\r\n            На главную\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      <TimeTable />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Days;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport TimeTable from \"./component/TimeTable\";\r\nimport { Form, Input, Button, Icon, Typography } from \"antd\";\r\nimport { allMonth } from \"./component/mock\";\r\nimport { ConfirmBlue } from \"./component/modal\";\r\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\r\nimport Month from \"./component/month\";\r\nimport Day from \"./component/day\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" render={props => <Month {...props} />} />\r\n        </Switch>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/detail/:last_name\"\r\n            render={props => <Day {...props} />}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default Form.create()(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}