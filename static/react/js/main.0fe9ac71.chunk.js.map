{"version":3,"sources":["component/TimeTable.js","component/modal.js","component/month.js","component/day.js","App.js","serviceWorker.js","index.js"],"names":["placeholder","type","style","fontSize","spin","TimeTable","result","loading","history","monthFilter","daysFilter","className","onRow","record","index","onClick","last_name","date","replace","push","locale","emptyText","dataSource","undefined","map","key","day_worked","days","filter","r","slice","length","day_more","running_min","day_less","columns","cols","title","dataIndex","width","render","sorter","a","b","localeCompare","time","newTime","h","m","normTime","renderColumns","confirm","Modal","showSuccessModal","obj","seconds","secondsToClose","successEmployeeAction","setNewButtonCaption","okText","timer","setInterval","setTimeout","clearInterval","destroy","comp","text","update","Option","Select","config","initialValue","required","validate","trigger","rules","message","Form","create","form","rest","onSubmit","e","persist","validateFields","err","values","async","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","content","status","icon","closable","maskClosable","centered","addUser","resetFields","calculateDate","retrieve","month","scope_days","reduce","acc","includes","forEach","user","day","alert","useState","setLoading","setResult","moment","utc","format","toString","setMonthFilter","getData","useEffect","Item","getFieldDecorator","onOk","cancelText","onChange","value","id","Days","props","match","params","data","to","ghost","App","exact","path","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.0fe9ac71.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Icon, Table } from \"antd\";\r\n\r\nconst placeholder = <Icon type=\"loading\" style={{ fontSize: 44 }} spin />;\r\n\r\nconst normTime = time => {\r\n  let newTime;\r\n  var h = (time / 60) ^ 0;\r\n  if (h) {\r\n    var m = time % 60;\r\n    if (m < 10) m = \"0\" + m;\r\n    newTime = h + \" ч \" + m + \" м\";\r\n  } else {\r\n    newTime = time + \" м\";\r\n  }\r\n  return newTime;\r\n};\r\n\r\nconst TimeTable = ({ result, loading, history, monthFilter, daysFilter }) => {\r\n  const renderColumns = () => {\r\n    let cols = [\r\n      {\r\n        title: \"Дата\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        width: \"10%\",\r\n        render: date => <div>{date && date}</div>,\r\n        sorter: (a, b) => {\r\n          return a.date.localeCompare(b.date);\r\n        }\r\n      },\r\n      {\r\n        title: \"Фамилия\",\r\n        dataIndex: \"last_name\",\r\n        key: \"last_name\",\r\n        width: \"10%\",\r\n        render: last_name => <div>{last_name && last_name}</div>,\r\n        sorter: (a, b) => {\r\n          return a.last_name.localeCompare(b.last_name);\r\n        }\r\n      },\r\n      {\r\n        title: \"Время\",\r\n        dataIndex: \"running_min\",\r\n        key: \"running_min\",\r\n        width: \"10%\",\r\n        render: running_min => <div>{running_min && normTime(running_min)}</div>,\r\n        sorter: (a, b) => {\r\n          return b.running_min - a.running_min\r\n        }\r\n      }\r\n    ];\r\n\r\n    const addingCols = [\r\n      {\r\n        title: \"Дней отработано\",\r\n        dataIndex: \"day_worked\",\r\n        key: \"day_worked\",\r\n        width: \"10%\",\r\n        render: day_worked => <div>{day_worked && day_worked}</div>,\r\n        sorter: (a, b) => {\r\n          return b.day_worked - a.day_worked;\r\n        }\r\n      },\r\n      {\r\n        title: \"дней > 4 часов\",\r\n        dataIndex: \"day_more\",\r\n        key: \"day_more\",\r\n        width: \"10%\",\r\n        render: day_more => <div>{day_more && day_more}</div>,\r\n        sorter: (a, b) => {\r\n          return b.day_more - a.day_more;\r\n        }\r\n      },\r\n      {\r\n        title: \"дней < 4 часов\",\r\n        dataIndex: \"day_less\",\r\n        key: \"day_less\",\r\n        width: \"10%\",\r\n        render: day_less => <div>{day_less && day_less}</div>,\r\n        sorter: (a, b) => {\r\n          return b.day_less - a.day_less\r\n        }\r\n      }\r\n    ]\r\n    return monthFilter !== undefined ? [...cols, ...addingCols] : [...cols]\r\n  };\r\n\r\n  const renderResult = () => {\r\n    if (monthFilter !== undefined) {\r\n      return result.map((record, index) => ({\r\n        key: index,\r\n        ...record,\r\n        day_worked: record.days.filter(r => r.date.slice(3) == monthFilter).length,\r\n        day_more: record.days.filter(r => r.date.slice(3) == monthFilter && r.running_min > 240).length,\r\n        day_less: record.days.filter(r => r.date.slice(3) == monthFilter && r.running_min < 240).length,\r\n\r\n      })).filter(record =>\r\n        monthFilter ? record.date == monthFilter : record.date.slice(3) == daysFilter\r\n      )\r\n    } else {\r\n      return result.map((record, index) => ({\r\n        key: index,\r\n        ...record,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const getDetail = (last_name, date) => monthFilter && history.push(`/detail/${last_name}/${date}`)\r\n\r\n  return (\r\n    <div className=\"Table-wrapper\">\r\n      <Table\r\n        onRow={(record, index) => ({\r\n          index,\r\n          onClick: () => monthFilter && getDetail(record.last_name, monthFilter.replace('/', '_'))\r\n        })}\r\n        locale={{ emptyText: loading ? placeholder : \"Нету результатов...\" }}\r\n        dataSource={renderResult()}\r\n        columns={renderColumns()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeTable;\r\n","import React from 'react';\r\nimport { Modal, Icon } from 'antd';\r\nimport './modal.css';\r\n\r\nconst confirm = Modal.confirm;\r\n\r\nexport const ConfirmBlue = (obj) => {\r\n    confirm({\r\n        title: 'Внимание!',\r\n        icon: <Icon type=\"question-circle\" />,\r\n        content: <span>Вы действительно хотите добавить нового пользоавателя?</span>,\r\n        cancelText: 'Отмена',\r\n        okText: 'Добавить',\r\n        centered: true,\r\n        className: 'blueConfirm',\r\n        ...obj\r\n    });\r\n};\r\n\r\nexport const showSuccessModal = (obj, seconds) => {\r\n    // если передано время закрытия используем его (если нет = 5)\r\n    let secondsToClose = (seconds ? seconds : 5);\r\n    // создаем модальное окно\r\n    const successEmployeeAction = Modal.confirm(obj);\r\n    // обновляем кнопку\r\n    setNewButtonCaption(successEmployeeAction, obj.okText, secondsToClose);\r\n    // обновляем состоянии кнопки по счеткику\r\n    const timer = setInterval(() => {\r\n        secondsToClose -= 1;\r\n        setNewButtonCaption(successEmployeeAction, obj.okText, secondsToClose);\r\n    }, 1000);\r\n    // закрываем окно по окончании отсчета\r\n    setTimeout(() => {\r\n        clearInterval(timer);\r\n        successEmployeeAction.destroy();\r\n    }, secondsToClose * 1000);\r\n};\r\n\r\n// дбавляем кол-во оставшихся до закрытия окна секунд к подписи кнопки\r\nconst setNewButtonCaption = (comp, text, seconds) => {\r\n    comp.update({\r\n        okText: text + \" (\" + seconds + \")\",\r\n    });\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TimeTable from \"./TimeTable\";\r\nimport { Form, Input, Button, Icon, Select } from \"antd\";\r\nimport { ConfirmBlue, showSuccessModal } from \"./modal\";\r\n// import { fetchAll } from './mock';\r\nimport moment from 'moment';\r\n\r\nconst { Option } = Select;\r\n\r\nconst config = (initialValue, required) => ({\r\n  initialValue,\r\n  validate: [\r\n    {\r\n      trigger: \"onChange\",\r\n      rules: [\r\n        {\r\n          required: required,\r\n          message: \"обязательное для заполнения\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n});\r\n\r\nconst addUser = async values => {\r\n  const rawResponse = await fetch(\"/user\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(values)\r\n  });\r\n  const content = await rawResponse.json();\r\n  switch (content.status) {\r\n    case 201:\r\n      showSuccessModal({\r\n        title: \"Успех!\",\r\n        content: `Пользователь ${values[\"last_name\"]}, успешно добавлен!`,\r\n        className: \"vehicleSuccess\",\r\n        okText: \"Готово\",\r\n        icon: \"check\",\r\n        closable: true,\r\n        maskClosable: true,\r\n        centered: true\r\n      });\r\n      break;\r\n\r\n    case 302:\r\n      showSuccessModal({\r\n        title: \"Ошибка!\",\r\n        content: content.message,\r\n        className: \"vehicleSuccess vehicleSuccess_warning\",\r\n        okText: \"Готово\",\r\n        icon: \"warning\",\r\n        closable: true,\r\n        maskClosable: true,\r\n        centered: true\r\n      });\r\n\r\n      break;\r\n\r\n    default:\r\n      showSuccessModal({\r\n        title: \"Ошибка!\",\r\n        content: content.message,\r\n        className: \"vehicleSuccess vehicleSuccess_warning\",\r\n        okText: \"Готово\",\r\n        icon: \"warning\",\r\n        closable: true,\r\n        maskClosable: true,\r\n        centered: true\r\n      });\r\n      break;\r\n  }\r\n};\r\n\r\nfunction Month({ form, ...rest }) {\r\n  const onSubmit = e => {\r\n    e.persist();\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        addUser(values);\r\n        form.resetFields();\r\n      }\r\n    });\r\n  };\r\n\r\n  const calculateDate = (retrieve) => {\r\n    if (!retrieve.days || !retrieve.month) {\r\n      alert('error in fetch api')\r\n      return\r\n    }\r\n    let scope_days = {};\r\n    const userArr = retrieve.month.reduce(\r\n      (acc, record) =>\r\n        acc.includes(record.last_name) ? acc : [...acc, record.last_name],\r\n      []\r\n    ).forEach(user => {\r\n      scope_days[user] = retrieve.days.filter(day => day.last_name == user)\r\n    })\r\n\r\n    return retrieve.month.map(record => ({ ...record, 'days': scope_days[record.last_name] }))\r\n  }\r\n\r\n  const getMonth = async values => {\r\n    setLoading(true);\r\n    const rawResponse = await fetch(\"/month_retrieve\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(values)\r\n    });\r\n    const content = await rawResponse.json();\r\n    setLoading(false);\r\n    setResult(content.data);\r\n  };\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState([]);\r\n  const [errors, setErrors] = useState(null);\r\n  const [monthFilter, setMonthFilter] = useState(moment.utc().format(\"MM/YYYY\").toString())\r\n\r\n  // const monthChange = e => getMonth({ 'month': e });\r\n\r\n  const getData = async () => {\r\n    setLoading(true);\r\n    const rawResponse = await fetch(\"/fetch\");\r\n    const content = await rawResponse.json();\r\n    setLoading(false);\r\n    setResult(calculateDate(content));\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div>\r\n            <Icon type=\"user\" />\r\n          </div>\r\n          <Form className=\"user-form\">\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"name\",\r\n                config(\"\", true)\r\n              )(<Input placeholder=\"Укажите имя\" className=\"sm\" />)}\r\n            </Form.Item>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"last_name\",\r\n                config(\"\", true)\r\n              )(<Input placeholder=\"Укажите фамилию\" className=\"sm\" />)}\r\n            </Form.Item>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"api_key\",\r\n                config(\"\", true)\r\n              )(<Input placeholder=\"Введите Api-key\" className=\"md\" />)}\r\n            </Form.Item>\r\n            <div className=\"btn\">\r\n              <Button\r\n                onClick={e =>\r\n                  ConfirmBlue({\r\n                    onOk: () => onSubmit(e)\r\n                  })\r\n                }\r\n                type=\"primary\"\r\n              >\r\n                Добавить\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <div className=\"table-hat\">\r\n            <div>\r\n              <Icon type=\"idcard\" />\r\n              <Select\r\n                className=\"select-month\"\r\n                placeholder=\"месяца\"\r\n                onChange={(e) => setMonthFilter(e)}\r\n                value={monthFilter}\r\n              >\r\n                {result &&\r\n                  result\r\n                    .reduce(\r\n                      (acc, record) =>\r\n                        acc.includes(record.date) ? acc : [...acc, record.date],\r\n                      []\r\n                    )\r\n                    .map(record => (\r\n                      <Option key={record} value={record}>{record}</Option>\r\n                    ))}\r\n              </Select>\r\n            </div>\r\n\r\n            <Icon type=\"clock-circle\" onClick={getData} id=\"update\" />\r\n          </div>\r\n          <TimeTable\r\n            result={result}\r\n            history={rest.history}\r\n            loading={loading}\r\n            monthFilter={monthFilter} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form.create()(Month);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Select } from \"antd\";\r\nimport TimeTable from \"./TimeTable\";\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n// import { alldays } from './mock';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Days = props => {\r\n  const getData = async (last_name, date) => {\r\n    setLoading(true);\r\n    const rawResponse = await fetch(`/days/${last_name}`)\r\n    const content = await rawResponse.json();\r\n    setLoading(false);\r\n    setResult(content.data.filter(r => r.date.slice(3) == date.replace('_', '/')))\r\n  };\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState([]);\r\n  const [errors, setErrors] = useState(null);\r\n  const [daysFilter, setDaysFilter] = useState(moment.utc().format(\"MM/YYYY\").toString())\r\n\r\n  useEffect(() => {\r\n    const { last_name, date } = props.match.params;\r\n    getData(last_name, date);\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <Link to=\"/\">\r\n          <Button type=\"link\" id=\"index-btn\" ghost={true}>\r\n            На главную\r\n          </Button>\r\n        </Link>\r\n        {/* <Select\r\n          className=\"select-month\"\r\n          placeholder=\"месяца\"\r\n          onChange={(e) => setDaysFilter(e)}\r\n          value={daysFilter}\r\n        >\r\n          {result &&\r\n            result\r\n              .reduce(\r\n                (acc, record) =>\r\n                  acc.includes(record.date.slice(3)) ? acc : [...acc, record.date.slice(3)],\r\n                []\r\n              )\r\n              .map(record => (\r\n                <Option key={record} value={record}>{record}</Option>\r\n              ))}\r\n        </Select> */}\r\n      </div>\r\n      <TimeTable loading={loading} result={result} daysFilter={daysFilter} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Days;\r\n","import React from \"react\";\r\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\r\nimport Month from \"./component/month\";\r\nimport Day from \"./component/day\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" render={props => <Month {...props} />} />\r\n        </Switch>\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/detail/:last_name/:date/\"\r\n            render={props => <Day {...props} />}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}